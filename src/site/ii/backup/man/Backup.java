/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package site.ii.backup.man;

import com.healthmarketscience.jackcess.ColumnBuilder;
import com.healthmarketscience.jackcess.Database;
import com.healthmarketscience.jackcess.DatabaseBuilder;
import com.healthmarketscience.jackcess.Row;
import com.healthmarketscience.jackcess.Table;
import com.healthmarketscience.jackcess.TableBuilder;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.sql.SQLException;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.SwingWorker;

/**
 *
 * @author developeracer
 */
public class Backup extends javax.swing.JFrame {

    String mysqlPath;

    /**
     * Creates new form Backup
     */
    public Backup() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Racebtn = new javax.swing.JButton();
        RebBtn = new javax.swing.JButton();
        Biometribtn = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Backup Registration : ");

        jLabel2.setText("Backup Race Data");
        jLabel2.setEnabled(false);

        jLabel3.setText("Backup Biometric Data :");
        jLabel3.setEnabled(false);

        Racebtn.setText("Backup");
        Racebtn.setEnabled(false);
        Racebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RacebtnActionPerformed(evt);
            }
        });

        RebBtn.setText("Backup");
        RebBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RebBtnActionPerformed(evt);
            }
        });

        Biometribtn.setText("Backup");
        Biometribtn.setEnabled(false);
        Biometribtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BiometribtnActionPerformed(evt);
            }
        });

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        jTabbedPane1.addTab("Console", jScrollPane1);

        jLabel4.setText("Version : 2015 Backup Build Dated 31/3/2015 11:16 AM Allows You to Backup fingerprint,Snaps,Attendence Records ");
        jTabbedPane1.addTab("Version Info", jLabel4);

        jToggleButton1.setText("Activate");
        jToggleButton1.setEnabled(false);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton1.setText("Test MDB");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Search MysqlDump");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Site II Backup Mananger ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(RebBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Racebtn)
                                    .addComponent(Biometribtn)))
                            .addComponent(jLabel2))
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(jTabbedPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(RebBtn)
                            .addComponent(jToggleButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(Racebtn))
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Biometribtn)
                            .addComponent(jLabel3)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void createUID() {
        UUID uuid = UUID.randomUUID();
        String randomUUIDString = uuid.toString();

        System.out.println("Random UUID String = " + randomUUIDString);
        System.out.println("UUID version       = " + uuid.version());
        System.out.println("UUID variant       = " + uuid.variant());
    }

    public void createDB() throws IOException, SQLException {

    }

    private void RacebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RacebtnActionPerformed

        new SwingWorker<Object, Object>() {

            @Override
            protected void done() {

                ConsoleMsg("Program Terminated Gracefully Cya ....");
            }

            @Override
            protected Object doInBackground() throws Exception {

                ConsoleMsg("Starting Backup Process....................");
                //             newTable.addRow("Starting SportsTracker Backup .");
                FileSearch fileSearch = new FileSearch();
                ConsoleMsg("Searching for File....................");
                fileSearch.searchDirectory(new File("C:\\Program Files\\MariaDB 10.0\\bin\\"), "mysqldump.exe");
                int count = fileSearch.getResult().size();
                if (count == 0) {
                    System.out.println("\nNo result found!");
                    ConsoleMsg(" Sorry We Can't Backup Your Database ");
                } else {
                    System.out.println("\nFound " + count + " result!\n");
                    for (String matched : fileSearch.getResult()) {
                        System.out.println("Found : " + matched);
                        mysqlPath = matched;
                        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
                        isBackup(matched + " -uRaceAdmin -pv721PL7y sportstracker_dev  -r  d:\\sportstracker_" + timeStamp + ".sql");

                    }
                }

                return null;
            }
        }.execute();
// TODO add your handling code here:
    }//GEN-LAST:event_RacebtnActionPerformed

    public void ConsoleMsg(String msg) {

        console.append("\n" + msg);
        console.setCaretPosition(console.getDocument().getLength());
    }

    public void CConsoleMsg(String msg) {

        console.append("\n" + msg);
        console.setCaretPosition(console.getDocument().getLength());
    }
    private void RebBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RebBtnActionPerformed
        new SwingWorker<Object, Object>() {

            @Override
            protected void done() {

                RebBtn.setEnabled(true);
                ConsoleMsg("Program Terminated Gracefully Cya ....");
            }

            @Override
            protected Object doInBackground() throws Exception {
                RebBtn.setEnabled(false);
                ConsoleMsg("Starting Backup Process....................");
                //             newTable.addRow("Starting SportsTracker Backup .");
                FileSearch fileSearch = new FileSearch();
                ConsoleMsg("Searching for File....................");
                 ConsoleMsg(mysqlPath);
               mysqlPath= mysqlPath.replaceAll("mysqldump.exe", "");
                 ConsoleMsg(mysqlPath);
                fileSearch.searchDirectory(new File(mysqlPath), "mysqldump.exe");
                int count = fileSearch.getResult().size();
                if (count == 0) {
                    System.out.println("\nNo result found!");
                    ConsoleMsg(" Sorry We Can't Backup Your Database ");
                } else {
                    System.out.println("\nFound " + count + " result!\n");
                    for (String matched : fileSearch.getResult()) {
                        System.out.println("Found : " + matched);
                        mysqlPath = matched;
                        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
                        isBackup(matched + " -uRaceAdmin -pv  registration fingerprint -r  d:\\registration_backup_fingerprint_" + timeStamp + ".sql");
                        isBackup(matched + " -uRaceAdmin -pv  registration snaps -r  d:\\registration_backup_snaps_" + timeStamp + ".sql");
                        isBackup(matched + " -uRaceAdmin -pv  registration attendence -r  d:\\registration_backup_attendence_" + timeStamp + ".sql");
                        isBackup(matched + " -uRaceAdmin -pv  registration pet -r  d:\\registration_backup_pet_" + timeStamp + ".sql");
                        isBackup(matched + " -uRaceAdmin -pv  registration fingerprinttemp -r  d:\\registration_backup_fingerprinttemp_" + timeStamp + ".sql");
                        isBackup(matched + " -uRaceAdmin -pv  sportstracker_dev -r  d:\\sportstracker_dev_backup_race_" + timeStamp + ".sql");

                    }
                }

                return null;
            }
        }.execute();        // TODO add your handling code here:
    }//GEN-LAST:event_RebBtnActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
        Database db;
        try {
            db = DatabaseBuilder.create(Database.FileFormat.V2000, new File("new.mdb"));
            Table newTable = new TableBuilder("NewTable")
                    .addColumn(new ColumnBuilder("a")
                            .setSQLType(Types.INTEGER))
                    .addColumn(new ColumnBuilder("b")
                            .setSQLType(Types.VARCHAR))
                    .toTable(db);
            newTable.addRow(1, "foo");
        } catch (IOException ex) {
            //  Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            //   Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void BiometribtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BiometribtnActionPerformed

        new SwingWorker<Object, Object>() {

            @Override
            protected void done() {

                ConsoleMsg("Program Terminated Gracefully Cya ....");
            }

            @Override
            protected Object doInBackground() throws Exception {

                ConsoleMsg("Starting Backup Process....................");
                //             newTable.addRow("Starting SportsTracker Backup .");
                FileSearch fileSearch = new FileSearch();
                ConsoleMsg("Searching for File....................");
                fileSearch.searchDirectory(new File("C:\\Program Files\\MariaDB 10.0\\bin\\"), "mysqldump.exe");
                int count = fileSearch.getResult().size();
                if (count == 0) {
                    System.out.println("\nNo result found!");
                    ConsoleMsg(" Sorry We Can't Backup Your Database ");
                } else {
                    System.out.println("\nFound " + count + " result!\n");
                    for (String matched : fileSearch.getResult()) {
                        System.out.println("Found : " + matched);
                        mysqlPath = matched;
                        ConsoleMsg("Connecting to Database ....");
                        isBackup(matched + " -uRaceAdmin -pv721PL7y total  -r  d:\\totaldumpfile.sql");

                    }
                }

                return null;
            }
        }.execute();        // TODO add your handling code here:
    }//GEN-LAST:event_BiometribtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        FileSearch fileSearch = new FileSearch();

        //try different directory and filename :)
        //    fileSearch.searchDirectory(new File("C:\\\\Program Files\\\\MySQL\\\\MySQL Server 5.6\\\\bin\\\\"), "mysqldump");
//C:\Program Files\MariaDB 10.0\bin
        fileSearch.searchDirectory(new File("C:\\Program Files\\MariaDB 10.0\\bin\\"), "mysqldump.exe");
        int count = fileSearch.getResult().size();
        if (count == 0) {
            System.out.println("\nNo result found!");
        } else {
            System.out.println("\nFound " + count + " result!\n");
            for (String matched : fileSearch.getResult()) {
                System.out.println("Found : " + matched);
                mysqlPath = matched;
            }
        }
//mysqldump

// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    public boolean isBackup(String path) {

        //"cmd.exe /c " + "mysqldump --user=myuser --password=mypass --host=localhost --all-databases > c:\\temp\\dumpfile.sql"; // For Windows
        //   String[] arg = new String[]{"-u root", "-h localhost"};
        //String[] arg = new String[]{"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqldump -umyuser -pmypass --all-databases -r  d:\\dumpfile.sql"};
        String[] arg = new String[]{path};

        try {
            String ss = null;
            Runtime obj = null;
            //Process p = Runtime.getRuntime().exec("/C:/Program Files/MySQL/MySQL Server 5.5/bin/mysql --user=root --host=localhost --port=3306 --password=urihurih --database=hiru select * from emp;");
            //Process p = Runtime.getRuntime().exec("cmd.exe /c start ");
            Process p = Runtime.getRuntime().exec(arg[0]);

            //obj.exec("cmd.exe /dir");
            BufferedWriter writeer = new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
            writeer.write("dir");
            writeer.flush();
            //p = Runtime.getRuntime().exec(" urihurih");
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));

            BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            ConsoleMsg(" Reading Structure This Process May take a while .. ");
            //obj.exec(ss);
            System.out.println("Here is the standard output of the command:\n");
            while ((ss = stdInput.readLine()) != null) {
                System.out.println(ss);
                CConsoleMsg(ss);
            }
            System.out.println("Here is the standard error of the command (if any):\n");
            while ((ss = stdError.readLine()) != null) {
                System.out.println(ss);
                CConsoleMsg(ss);
            }
            ConsoleMsg(" Process Completed ..");
        } catch (IOException e) {
            System.out.println("FROM CATCH" + e.toString());
            CConsoleMsg(e.getMessage());
        }
        return false;

    }

    public boolean isBackup(String path, JButton btn) {

        //"cmd.exe /c " + "mysqldump --user=myuser --password=mypass --host=localhost --all-databases > c:\\temp\\dumpfile.sql"; // For Windows
        //   String[] arg = new String[]{"-u root", "-h localhost"};
        //String[] arg = new String[]{"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqldump -umyuser -pmypass --all-databases -r  d:\\dumpfile.sql"};
        String[] arg = new String[]{path};

        btn.setEnabled(false);
        try {
            String ss = null;
            Runtime obj = null;
            //Process p = Runtime.getRuntime().exec("/C:/Program Files/MySQL/MySQL Server 5.5/bin/mysql --user=root --host=localhost --port=3306 --password=urihurih --database=hiru select * from emp;");
            //Process p = Runtime.getRuntime().exec("cmd.exe /c start ");
            Process p = Runtime.getRuntime().exec(arg[0]);

            //obj.exec("cmd.exe /dir");
            BufferedWriter writeer = new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
            writeer.write("dir");
            writeer.flush();
            //p = Runtime.getRuntime().exec(" urihurih");
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));

            BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

            //obj.exec(ss);
            System.out.println("Here is the standard output of the command:\n");
            while ((ss = stdInput.readLine()) != null) {
                System.out.println(ss);
                CConsoleMsg(ss);
            }
            System.out.println("Here is the standard error of the command (if any):\n");
            while ((ss = stdError.readLine()) != null) {
                System.out.println(ss);
                CConsoleMsg(ss);
            }

        } catch (IOException e) {
            System.out.println("FROM CATCH" + e.toString());
            CConsoleMsg(e.getMessage());
            btn.setEnabled(true);
        }
        btn.setEnabled(true);
        return false;

    }

    public void getExplorer() {
        String startDir = System.getProperty("user.dir");
        try {

            Runtime.getRuntime().exec("explorer /select,  " + startDir);

        } catch (IOException ex) {
            CConsoleMsg(ex.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Backup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Biometribtn;
    private javax.swing.JButton Racebtn;
    private javax.swing.JButton RebBtn;
    private javax.swing.JTextArea console;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
